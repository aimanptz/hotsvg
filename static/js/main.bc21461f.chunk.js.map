{"version":3,"sources":["components/search-input/search-input.module.scss","components/modal/modal.module.scss","actions/actionTypes.ts","reducers/updateGeneratedFiles.ts","interfaces/svgTypes.ts","reducers/updateRejectedFiles.ts","reducers/index.ts","store.ts","interfaces/SvgSymbol.ts","interfaces/SvgFile.ts","interfaces/SvgIcon.ts","interfaces/errorTypes.ts","utils/appendXMLToDom.ts","services/sprite-service.ts","services/test-sprite-service.ts","selectors/generatedFilesSelector.ts","selectors/renderedFilesSelector.ts","utils/filter-uploaded-files.ts","actions/index.ts","components/sprite-input/index.ts","components/sprite-input/sprite-input.tsx","components/delete-data-button/delete-data-button.tsx","components/delete-data-button/index.ts","components/header/index.ts","components/header/header.tsx","components/sprite-list-item/index.ts","components/sprite-list-item/sprite-list-item.tsx","components/sprite-list/index.ts","components/sprite-list/sprite-list.tsx","components/svg-list/index.ts","components/svg-list/svg-list.tsx","components/search-input/index.ts","components/search-input/search-input.tsx","containers/uploaded-sprite-list.tsx","components/sprite-list-navigation/sprite-list-navigation.tsx","components/sprite-list-navigation/index.ts","containers/rejected-files-modal.tsx","selectors/rejectedFilesSelector.ts","components/app/index.js","components/app/app.tsx","index.tsx"],"names":["module","exports","actionTypes","svgTypes","updateGeneratedFiles","generatedSpriteFiles","action","type","updateSpriteFilesStart","loading","error","updateSpriteFilesSuccess","svgArray","payload","updateSpriteFilesFail","deleteUploadedData","initialGeneratedFilesState","updateRejectedFiles","rejectedFiles","initialState","generatedFiles","rootReducer","state","store","createStore","SvgSymbol","id","title","viewBox","this","SvgFile","src","name","lastModified","data","SvgIcon","icon","ErrorTypes","RejectedFile","file","errorType","appendXMLToDom","container","text","className","el","DOMParser","parseFromString","documentElement","setAttribute","appendChild","REG_EXP","symbolId","symbolTitle","symbolViewBox","symbol","svg","fileTitle","getContentData","fileContent","symbolArray","sprite","match","document","body","symbols","map","getSymbolAttribute","exp","result","getSvgSymbols","getSvgIcon","loadTestSvgFiles","a","fetchTestFiles","testSpriteFiles","generateTestSvgFileArr","fetchTestFile","url","fetch","then","res","loadedFiles","push","catch","er","load","urlTestSvg","Date","getDate","generatedFilesSelector","renderedFilesSelector","filterNewFilesOnUpload","NewFilesArr","uploadedFiles","getState","filter","newFile","some","uploadedFile","generateSpriteFilesStarted","generateSpriteFilesSuccess","loadTestData","dispatch","testFiles","parsedFiles","forEach","testFile","parsedFile","parse","length","alert","loadData","newFiles","Promise","all","reader","FileReader","readAsText","onload","fileName","replace","size","svgFiles","newSvgFiles","Error","console","log","svgFile","generateSpriteFilesFail","SpriteInput","connect","props","useEffect","window","addEventListener","dropHandler","dragHandler","removeEventListener","e","preventDefault","dataTransfer","files","Array","from","accept","multiple","hidden","onChange","target","onClick","value","mapDispatchToProps","onDeleteData","DeleteDataButton","spriteList","Header","SpriteListItem","xlinkHref","SpriteList","symbolList","regExp","spriteItems","search","idx","key","SvgList","list","useRef","current","ref","SearchInput","onChangeFilter","placeholder","styles","uploadedList","useState","setValue","RegExp","generatedList","item","SpriteListNavigation","spriteNames","to","scroll","scrollIntoView","behavior","RejectedFilesModal","Component","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bc21461f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"search-input_search__lj75E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalWrapper\":\"modal_modalWrapper__r3RLO\"};","enum actionTypes  {\n  updateSpriteFilesStart,\n  updateSpriteFilesSuccess,\n  updateSpriteFilesFail,\n\n  updateRejectedFiles,\n\n  /*updateFilesData,*/\n\n  deleteUploadedData,\n  deleteUploadedFile,\n}\n\nexport default actionTypes;\n","import actionTypes from '../actions/actionTypes';\nimport { Action, GeneratedFiles } from '../interfaces';\nimport {initialGeneratedFilesState} from \"./index\";\n\nconst updateGeneratedFiles = (generatedSpriteFiles: GeneratedFiles, action: Action) => {\n  switch (action.type) {\n    case actionTypes.updateSpriteFilesStart :\n      return {\n        ...generatedSpriteFiles,\n        loading: true,\n        error: '',\n      };\n    case actionTypes.updateSpriteFilesSuccess :\n      return {\n        svgArray: [...generatedSpriteFiles.svgArray, ...action.payload],\n        loading: false,\n        error: '',\n      };\n    case actionTypes.updateSpriteFilesFail :\n      return {\n        ...generatedSpriteFiles,\n        loading: false,\n        error: action.payload,\n      };\n    case actionTypes.deleteUploadedData :\n      return initialGeneratedFilesState;\n    default :\n      return generatedSpriteFiles;\n  }\n};\n\nexport default updateGeneratedFiles;\n","enum svgTypes {\n  icon,\n  sprite\n}\n\nexport default svgTypes;","import actionTypes from '../actions/actionTypes';\nimport { Action, RejectedFile } from '../interfaces';\n\nconst updateRejectedFiles = (rejectedFiles: RejectedFile[], action: Action) => {\n    switch (action.type) {\n        case actionTypes.updateRejectedFiles:\n            return action.payload;\n        default :\n            return rejectedFiles;\n    }\n};\n\nexport default updateRejectedFiles;\n","import {Action, GeneratedFiles, RejectedFile, State} from '../interfaces';\n\nimport updateGeneratedFiles from './updateGeneratedFiles';\nimport updateRejectedFiles from './updateRejectedFiles';\n\nexport const initialGeneratedFilesState: GeneratedFiles = {\n  svgArray: [],\n  loading: false,\n  error: '',\n};\n\nexport const initialRejectedFilesState: RejectedFile[] = [];\n\nconst initialState: State = {\n  generatedFiles: initialGeneratedFilesState,\n  rejectedFiles: initialRejectedFilesState,\n};\n\nconst rootReducer = (state: State = initialState, action: Action): State => ({\n  generatedFiles: updateGeneratedFiles(state.generatedFiles, action),\n  rejectedFiles: updateRejectedFiles(state.rejectedFiles, action),\n});\n\nexport default rootReducer;","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\n\nexport default store;","export default class SvgSymbol {\n  id: string;\n  title: string;\n  viewBox: string;\n\n  constructor(id: string, title: string, viewBox: string) {\n    this.id = id;\n    this.title = title;\n    this.viewBox = viewBox;\n  }\n}","export default class SvgFile {\n  src: string;\n  id: number;\n  title: string;\n  data: {\n    name: string,\n    lastModified: number\n  };\n\n  constructor(src: string, title: string, id: number, name: string, lastModified: number) {\n    this.src = src;\n    this.title = title;\n    this.id = id;\n    this.data = {\n      name,\n      lastModified,\n    };\n  }\n}\n\n","import { svgTypes } from './index';\n\n\nexport default class SvgIcon {\n  type: svgTypes.icon;\n  icon: string;\n  id: number;\n  title: string;\n  data: {\n    name: string,\n    lastModified: number,\n  };\n\n  constructor(icon: string, id: number, title: string, data: { name: string, lastModified: number}) {\n      this.type = svgTypes.icon;\n      this.icon = icon;\n      this.id = id;\n      this.title = title;\n      this.data = {\n        name: data.name,\n        lastModified: data.lastModified,\n      };\n  }\n}","enum ErrorTypes {\n    load,\n    parse,\n}\n\nclass RejectedFile {\n    constructor(readonly file: string, readonly errorType: ErrorTypes) {}\n}\n\nexport default RejectedFile;\n\nexport {\n    ErrorTypes\n}","export default function appendXMLToDom(container: HTMLElement, text: string, className?: string) {\n  const parser = new DOMParser();\n  const el = parser.parseFromString(text, \"text/xml\").documentElement;\n  if (className) el.setAttribute('class', className);\n  container.appendChild(el);\n}","import { SvgFile, SvgIcon, SvgSprite, SvgSymbol, svgTypes } from '../interfaces';\nimport appendXMLToDom from '../utils/appendXMLToDom';\n\nconst REG_EXP = {\n  symbolId: /id=[\"'](.*?)[\"']/i,\n  symbolTitle: /<title>(.*?)<\\/title>/i,\n  symbolViewBox: /viewBox=[\"'](.*?)[\"']/i,\n  symbol: /<symbol.*?<\\/symbol>/gmis,\n\n  svg: /<svg.*?<\\/svg>/gmis,\n\n  fileTitle: /\\.svg$/i,\n};\n\nfunction generateSvgFileArr(uploadedFiles: File[]): Promise<SvgFile[]> {\n  return Promise.all<SvgFile>(uploadedFiles.map(file => {\n    return new Promise(res => {\n      const reader = new FileReader();\n      reader.readAsText(file, 'UTF-8');\n      reader.onload = () => {\n        return res(new SvgFile(\n          reader.result as string,\n          getFileTitle(file.name, REG_EXP.fileTitle),\n          getFileId(file.lastModified, file.size),\n          file.name,\n          file.lastModified,\n          ),\n        );\n      };\n    });\n  }));\n\n  function getFileTitle(fileName: string, exp: RegExp) {\n    return fileName.replace(exp, '');\n  }\n\n  function getFileId(lastModified: number, size: number) {\n    return (lastModified + size) % 100000;\n  }\n}\n\nfunction getContentData({ src, id, title, data }: SvgFile) {\n  return getSvgSymbols(src, id, title, data) || getSvgIcon(src, id, title, data);\n}\n\nfunction getSvgIcon(fileContent: string, id: number, title: string, data: { name: string, lastModified: number }) {\n  const icon = fileContent.match(REG_EXP.svg);\n  return icon && new SvgIcon(icon[0], id, title, data);\n}\n\nfunction getSvgSymbols(fileContent: string, id: number, title: string, data: { name: string, lastModified: number }): SvgSprite | null {\n  const symbolArray = getSymbolArray(fileContent);\n  if (!symbolArray) return null;\n\n  appendXMLToDom(document.body, fileContent);\n  return {\n    type: svgTypes.sprite,\n    id,\n    title,\n    data: {\n      name: data.name,\n      lastModified: data.lastModified,\n    },\n    symbols: symbolArray.map(svg => new SvgSymbol(\n      getSymbolAttribute(svg, REG_EXP.symbolId),\n      getSymbolAttribute(svg, REG_EXP.symbolTitle),\n      getSymbolAttribute(svg, REG_EXP.symbolViewBox),\n    )),\n  };\n\n  function getSymbolArray(sprite: string) {\n    return sprite.match(REG_EXP.symbol);\n  }\n\n  function getSymbolAttribute(svg: string, exp: RegExp) {\n    const result = svg.match(exp);\n    return result ? result[1] : '';\n  }\n}\n\nexport {\n  generateSvgFileArr,\n  getContentData,\n};","import {ErrorTypes, RejectedFile, SvgFile} from '../interfaces';\n\nexport const loadTestSvgFiles = async () => {\n    const testSpriteFiles = await fetchTestFiles();\n    return generateTestSvgFileArr(testSpriteFiles);\n};\n\nconst fetchTestFiles = async () => {\n\n    const urlTestSprite = \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/sprites/regular.svg\";\n    const urlTestSvg = \"https://s.cdpn.io/3/kiwi1.svg\";\n\n    const loadedFiles: string[] = [];\n    const rejectedFiles: RejectedFile[] = [];\n\n    await fetchTestFile(urlTestSprite);\n    await fetchTestFile(urlTestSvg);\n\n    return {\n        loadedFiles,\n        rejectedFiles\n    };\n\n    function fetchTestFile(url: string): Promise<number> {\n        return fetch(url)\n            .then(res => res.text())\n            .then(data => loadedFiles.push(data))\n            .catch(er => rejectedFiles.push(new RejectedFile(url, ErrorTypes.load)))\n    }\n};\n\nfunction generateTestSvgFileArr({loadedFiles, rejectedFiles} : ({loadedFiles: string[], rejectedFiles: RejectedFile[]})) {\n    const generatedTestFile = loadedFiles.map((file, id) => {\n        const title = `test-file #${1 + id}`;\n        return new SvgFile(\n            file,\n            title,\n            id,\n            title,\n            new Date().getDate(),\n        )\n    });\n\n    return {\n        loadedFiles: generatedTestFile,\n        rejectedFiles\n    }\n}\n\n/*\nfunction generateTestSvgFileArr(filesArr: (string | RejectedFile)[]): (SvgFile | RejectedFile)[] {\n    return filesArr.map((file, id) => {\n        if (typeof file !== 'string') {\n            return {errorType: 'load', fileName: 'ufsdf'}\n        }\n\n        const title = `test-file #${1 + id}`;\n        return new SvgFile(\n            file,\n            title,\n            id,\n            title,\n            new Date().getDate(),\n        )\n    });\n}*/\n","import { State, SvgArray } from '../interfaces/';\n\nconst generatedFilesSelector = ({ generatedFiles: { svgArray } }: State): SvgArray => {\n  return svgArray;\n};\n\nexport default generatedFilesSelector;","import { State } from '../interfaces/';\n\nconst renderedFilesSelector = ({ generatedFiles: { svgArray } }: State): {title: string, id: number}[] => {\n  return svgArray.map(({title, id}) => ({title, id}));\n};\n\nexport default renderedFilesSelector;\n","import { SvgFile } from '../interfaces';\nimport { generatedFilesSelector } from '../selectors';\n\nimport store from '../store';\n\nconst filterNewFilesOnUpload = (NewFilesArr: SvgFile[]) => {\n  const uploadedFiles = generatedFilesSelector(store.getState());\n  return NewFilesArr.filter(newFile => {\n    return !uploadedFiles.some(uploadedFile => {\n      return uploadedFile.data.name === newFile.data.name && uploadedFile.data.lastModified === newFile.data.lastModified\n    });\n  });\n};\n\nexport default filterNewFilesOnUpload;","import actionTypes from './actionTypes';\n\nimport {Action, ErrorTypes, SvgFile, SvgIcon, SvgSprite} from '../interfaces';\nimport {generateSvgFileArr, getContentData} from '../services/sprite-service';\nimport {loadTestSvgFiles} from '../services/test-sprite-service';\n\nimport filterNewFilesOnUpload from '../utils/filter-uploaded-files';\nimport RejectedFile from \"../interfaces/errorTypes\";\n\n/*  Generate Sprites  */\nconst generateSpriteFilesStarted = (): Action => ({type: actionTypes.updateSpriteFilesStart});\n\nconst generateSpriteFilesSuccess = (payload: (SvgIcon | SvgSprite)[]): Action => ({\n    type: actionTypes.updateSpriteFilesSuccess,\n    payload,\n});\n\nconst generateSpriteFilesFail = (error: string): Action => ({\n    type: actionTypes.updateSpriteFilesFail,\n    payload: error,\n});\n\nconst rejectedFilesSuccess = (payload: RejectedFile[]): Action => ({\n    type: actionTypes.updateRejectedFiles,\n    payload,\n});\n\n/*  Delete Uploaded Data  */\nconst deleteUploadedData = (): Action => ({\n    type: actionTypes.deleteUploadedData,\n});\n\nconst loadTestData = (dispatch: any) => () => {\n    dispatch(generateSpriteFilesStarted());\n    loadTestSvgFiles()\n        .then(testFiles => {\n            const parsedFiles: (SvgIcon | SvgSprite)[] = [];\n            testFiles.loadedFiles.forEach(testFile => {\n                const parsedFile = getContentData(testFile);\n                if (!parsedFile) {\n                    testFiles.rejectedFiles.push(new RejectedFile(testFile.title, ErrorTypes.parse))\n                } else {\n                    parsedFiles.push(parsedFile)\n                }\n            });\n\n            dispatch(generateSpriteFilesSuccess(parsedFiles));\n\n            if (testFiles.rejectedFiles.length) {\n                dispatch(rejectedFilesSuccess(testFiles.rejectedFiles));\n            }\n        })\n        .catch(er => alert(er));\n};\n\nconst loadData = (dispatch: any) => (newFiles: File[]) => {\n    dispatch(generateSpriteFilesStarted());\n    generateSvgFileArr(newFiles)\n        .then(svgFiles => {\n            const newSvgFiles = filterNewFilesOnUpload(svgFiles);\n\n            /*  On upload duplicated files...popup with list of duplicated files coming */\n            if (!newSvgFiles.length) throw Error('All files were uploaded earlier(No duplicated files, please ;))');\n            if (newSvgFiles.length < svgFiles.length) console.log('Some files were uploaded earlier(No duplicated files, please) ;)');\n\n            const parsedFiles: (SvgIcon | SvgSprite)[] = [];\n            newSvgFiles.forEach(svgFile => {\n                const parsedFile = getContentData(svgFile);\n\n                /*  On upload non-valid files...popup with list of non-valid files coming */\n                if (!parsedFile) throw Error('Unable to parse the file');\n                parsedFiles.push(parsedFile);\n            });\n\n            dispatch(generateSpriteFilesSuccess(parsedFiles));\n\n        })\n        .catch(error => dispatch(generateSpriteFilesFail(error)));\n};\n\nexport {\n    loadData,\n    loadTestData,\n    deleteUploadedData,\n};","import SpriteInput from './sprite-input';\n\nexport default SpriteInput;","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\n/*  Utils */\nimport { loadData } from '../../actions';\nimport {Dispatch} from \"redux\";\n\ntype Props = {\n  loadData: (a: File[]) => void\n};\n\nconst SpriteInput = (props: Props) => {\n\n  const onChangeHandler = (e: React.ChangeEvent) => {\n    const { files } = e.target as HTMLInputElement;\n    if (files) {\n      props.loadData(Array.from(files));\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('drop', dropHandler, false);\n    window.addEventListener('dragover', dragHandler, false);\n\n    return () => {\n      window.removeEventListener('drop', dropHandler, false);\n      window.removeEventListener('dragover', dragHandler, false);\n    };\n  }, []);\n\n  const dragHandler = (e: DragEvent) => {\n    e.preventDefault();\n  };\n\n  const dropHandler = (e: DragEvent) => {\n    e.preventDefault();\n\n    if (e.dataTransfer && e.dataTransfer.files) {\n      /*  file check - to remove from the component */\n      props.loadData(Array.from(e.dataTransfer.files).filter(file => file.type === 'image/svg+xml'));\n    }\n  };\n\n  return (\n    <label className=\"btn-solid header__input\">\n      <span>Pick or drop</span>\n      <input type=\"file\"\n             accept=\".svg\"\n             multiple\n             hidden\n             onChange={onChangeHandler}\n             onClick={({ target }) => (target as HTMLInputElement).value = ''}\n      />\n    </label>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  loadData: loadData(dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(SpriteInput);","import React from 'react';\nimport { connect } from 'react-redux';\n\n/*  Utils */\nimport { State, SvgArray } from '../../interfaces';\nimport { generatedFilesSelector } from '../../selectors';\nimport { deleteUploadedData } from '../../actions';\n\n/*  Styles  */\nimport './delete-data-button.scss';\n\ntype Props = {\n  spriteList: SvgArray,\n  onDeleteData: any\n}\n\nconst DeleteDataButton = ({spriteList, onDeleteData}: Props) => {\n  if (!spriteList.length) return null;\n\n  return (\n    <button type=\"button\"\n            className=\"btn-text btn-cancel\"\n            onClick={onDeleteData}\n    >\n      Clear\n    </button>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  spriteList: generatedFilesSelector(state),\n});\n\nconst mapDispatchToProps = {\n  onDeleteData: deleteUploadedData,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteDataButton);","import DeleteDataButton from './delete-data-button';\n\nexport default DeleteDataButton;","import Header from './header';\n\nexport default Header;\n","import React from 'react';\n\n/*  Components  */\nimport SpriteInput from '../sprite-input';\nimport DeleteDataButton from '../delete-data-button';\n\n/*  Styles  */\nimport './header.scss';\n\nconst Header: React.FC = () => (\n  <header className=\"header\">\n    <SpriteInput />\n    <DeleteDataButton />\n  </header>\n);\n\nexport default Header;","import SpriteListItem from './sprite-list-item';\n\nexport default SpriteListItem;","import React from 'react';\n\n/*  Utils */\nimport { SvgSymbol } from '../../interfaces';\n\n/*  Styles  */\nimport './sprite-list-item.scss';\n\ninterface Props {\n  symbol: SvgSymbol,\n  //idx: number,\n}\n\nconst SpriteListItem = ({ symbol: { id, viewBox, title } }: Props) => {\n  return (\n    <li className=\"sprite-list__item\">\n      <svg viewBox={viewBox} className=\"icon\">\n        <use xlinkHref={`#${id}`} />\n      </svg>\n      <div className=\"icon-info\">\n        <p className=\"icon-name\">{id}</p>\n        <p className=\"icon-title\">{title}</p>\n      </div>\n    </li>\n  );\n};\n\nexport default SpriteListItem;","import SpriteList from './sprite-list';\n\nexport default SpriteList;\n","import React from 'react';\n\n/*  Utils */\nimport { SvgFile, SvgSymbol } from '../../interfaces';\n\n/*  Components  */\nimport SpriteListItem from '../sprite-list-item';\n\n/*  Styles  */\nimport './sprite-list.scss';\n\ninterface Props {\n  spriteList: SvgFile\n}\n\ntype SpriteListProps = {\n  symbolList: SvgSymbol[],\n  id: number,\n  title: string,\n  regExp: RegExp,\n}\n\nconst SpriteList = ({ symbolList, id, title, regExp }: SpriteListProps) => {\n\n  const spriteItems = symbolList\n    .filter(symbol => symbol.id.search(regExp) !== -1)\n    .map((symbol, idx) => {\n    /*  Add id field in order not to use array idx*/\n    return <SpriteListItem key={idx + 1} symbol={symbol} />;\n  });\n\n  if (!spriteItems.length) {\n    return null\n  }\n\n  return (\n    <ul className=\"sprite-list\" id={`${id}`}>\n      <li key={0} className=\"sprite-list__title\"><h3>{title}</h3></li>\n      {spriteItems}\n    </ul>\n  )\n};\n\nexport default SpriteList;\n\n\n\n","import SvgList from './svg-list';\n\nexport default SvgList;","import React, { useEffect, useRef } from 'react';\n\n/*  Utils */\nimport appendXMLToDom from '../../utils/appendXMLToDom';\n\n/*  Styles  */\nimport './svg-list.scss';\n\ntype Props = {\n  icon: string,\n  id: number,\n  title: string,\n};\n\nconst SvgList = ({ icon, id, title }: Props) => {\n\n  const list = useRef<HTMLUListElement>(null);\n\n  useEffect(() => {\n    if (!list || !list.current) return;\n    appendXMLToDom(list.current, icon, 'icon');\n  }, []);\n\n  return (\n    <ul className=\"svg-list\" id={`${id}`} ref={list}>\n      <li key={0} className=\"svg-list__title\"><h3>{title}</h3></li>\n    </ul>\n  );\n};\n\nexport default SvgList;\n","import SearchInput from './search-input';\n\nexport default SearchInput;","import React from 'react';\nimport { connect } from 'react-redux';\n\n/*  Styles  */\nimport styles from './search-input.module.scss';\n\n/*  Utils */\nimport { loadData } from '../../actions';\nimport { State } from '../../interfaces';\nimport { generatedFilesSelector } from '../../selectors';\nimport {Dispatch} from \"redux\";\n\ntype Props = {\n  loadData: (a: File[]) => void,\n  value: string,\n  onChangeFilter: (a: string) => void,\n};\n\nconst SearchInput = ({ value, onChangeFilter }: Props) => {\n\n  const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onChangeFilter(e.target.value);\n  };\n\n  return (\n    <input\n      placeholder=\"Search\"\n      className={styles.search}\n      type=\"text\"\n      onChange={onChangeHandler}\n      value={value}\n    />\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  spriteList: generatedFilesSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  loadData: loadData(dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchInput);","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\n/*  Utils  */\nimport { State, SvgArray, svgTypes } from '../interfaces';\nimport { generatedFilesSelector } from '../selectors';\nimport { loadTestData } from '../actions';\n\n/*  Components  */\nimport SpriteList from '../components/sprite-list';\nimport SvgList from '../components/svg-list';\nimport SearchInput from '../components/search-input';\nimport {Dispatch} from \"redux\";\n\ntype Props = {\n  uploadedList: SvgArray,\n  loadTestData: () => void,\n}\n\nconst UploadedSpriteList = (props: Props) => {\n\n  const [value, setValue] = useState('');\n\n  useEffect(() => {\n    if (!props.uploadedList.length) {\n      props.loadTestData();\n    }\n  },[]);\n\n  const onChangeFilter = (value: string) => {\n    setValue(value);\n  };\n\n  const regExp = new RegExp(value,\"gi\");\n\n  const generatedList = props.uploadedList.map(item => {\n    const { id, title } = item;\n\n    switch (item.type) {\n      case svgTypes.sprite: {\n        return <SpriteList symbolList={item.symbols} id={id} title={title} key={id} regExp={regExp}/>;\n      }\n      case svgTypes.icon: {\n        if (title.search(regExp) === -1) {\n          return null;\n        }\n        return <SvgList icon={item.icon} id={id} title={title} key={id} />;\n      }\n      default:\n        return null;\n    }\n  });\n\n\n  return (\n    <>\n      {!props.uploadedList.length || <SearchInput value={value} onChangeFilter={onChangeFilter} />}\n      <section className=\"content\">\n        {generatedList}\n      </section>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  uploadedList: generatedFilesSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  loadTestData: loadTestData(dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadedSpriteList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { HashLink } from 'react-router-hash-link';\n\n/*  Utils */\nimport { renderedFilesSelector } from '../../selectors';\nimport { State } from '../../interfaces';\n\n/*  Styles  */\nimport './sprite-list-navigation.scss';\n\ntype Props = {\n  spriteNames: { title: string, id: number }[]\n}\n\nconst SpriteListNavigation = ({ spriteNames }: Props) => {\n\n  return (\n    <nav className=\"nav\">\n      <ul className=\"nav-list\">\n        {spriteNames.map(({ title, id }) => {\n          return <li key={id} className=\"nav-list__item\">\n            <HashLink to={`#${id}`}\n                      scroll={el => el.scrollIntoView({ behavior: 'smooth' })}\n                      className=\"nav-list__link\"\n            >{title}</HashLink>\n          </li>;\n        })}\n      </ul>\n    </nav>\n  );\n};\n\nfunction mapStateToProps(state: State) {\n  return {\n    spriteNames: renderedFilesSelector(state),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n)(SpriteListNavigation);","import SpriteListNavigation from './sprite-list-navigation'\n\nexport default SpriteListNavigation;","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\n\n/*  Utils   */\nimport {State, RejectedFile} from \"../interfaces\";\nimport {rejectedFilesSelector} from \"../selectors\";\nimport Modal from \"../components/modal/modal\";\n\n\ntype Props =  {\n    rejectedFiles: RejectedFile[]\n}\n\nclass RejectedFilesModal extends Component<Props> {\n    render() {\n        return null;\n        if ( !this.props.rejectedFiles.length) {\n            return null;\n        }\n        return (\n            <Modal>\n                <h1>kokoko</h1>\n            </Modal>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State) => ({\n    rejectedFiles: rejectedFilesSelector(state),\n});\n\nexport default connect(mapStateToProps)(RejectedFilesModal);\n","import {State} from \"../interfaces\";\n\nexport default function rejectedFilesSelector ({ rejectedFiles}: State) {\n    return rejectedFiles;\n};","import App from './app';\n\nexport default App;\n","import React from 'react';\n\n/*  Styles  */\nimport './app.scss';\n\n/*  Components  */\nimport Header from '../header';\nimport UploadedSpriteList from '../../containers/uploaded-sprite-list';\nimport SpriteListNavigation from '../sprite-list-navigation';\nimport RejectedFilesModal from \"../../containers/rejected-files-modal\";\n\nconst App = () => (\n    <div className=\"app\">\n        <Header/>\n\n        <main className=\"main\">\n            <aside className=\"sidebar\">\n                <SpriteListNavigation/>\n            </aside>\n\n            <section className=\"content-wrapper\">\n                <UploadedSpriteList/>\n            </section>\n        </main>\n\n        <RejectedFilesModal />\n    </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nimport './index.scss';\n\n/*  Utils */\nimport store from './store';\n\n/*  Components  */\nimport App from './components/app';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}